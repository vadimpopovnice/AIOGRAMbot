from config import token, open_weather_token
import requests
import datetime
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram import executor

bot = Bot(token=token)
dp = Dispatcher(bot)

@dp.message_handler(commands=["help"])
async def process_help_command(message: types.Message):
    await message.answer("/getwheather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.")


@dp.message_handler(commands=["start"])
async def process_start_command(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\n"
                        f"–Ø - —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –Ω–∞ —è–¥—Ä–µ aiogram. üåé"
                        f"\n–ú–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Å–æ –≤—Ä–µ–º–Ω–µ–º –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è."
                        f"\n/help - —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.")


@dp.message_handler(commands=["getwheather"])
async def getwheather(message: types.Message):
    await message.answer(f"\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É. üå§")
@dp.message_handler()
async def getwheather(message: types.Message):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    try:
        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]

        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, —è —Ö–∑ —á—Ç–æ —ç—Ç–æ! ü§î"

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        lenght_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - \
                            datetime.datetime.fromtimestamp(data["sys"]["sunrise"])

        await message.answer(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
              f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n"
              f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure}–º–º.—Ä—Ç.—Å—Ç\n"
              f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind}–ú/–°\n–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n"
              f"–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {lenght_of_the_day}"
              f"\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üòò")


    except:
        await message.reply("\U00002620 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.\U00002620", reply=False)





















def main():
    executor.start_polling(dispatcher=dp)

if __name__ == '__main__':
    executor.start_polling(dp)